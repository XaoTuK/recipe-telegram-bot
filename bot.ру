#!/usr/bin/env python3
import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ Railway
BOT_TOKEN = os.environ['BOT_TOKEN']
YANDEX_API_KEY = os.environ['YANDEX_API_KEY'] 
FOLDER_ID = os.environ['FOLDER_ID']

# URL –¥–ª—è YandexGPT API
YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üç≥ –ü—Ä–∏–≤–µ—Ç! –Ø RecipeChefAI - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≥–æ—Ç–æ–≤–∫–µ!

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:
"–∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –ª—É–∫, –º–æ—Ä–∫–æ–≤—å, –ø–æ–º–∏–¥–æ—Ä—ã"

–ò —è –ø—Ä–∏–¥—É–º–∞—é –¥–ª—è —Ç–µ–±—è –≤–∫—É—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç!
    """
    await update.message.reply_text(welcome_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"""
    user_message = update.message.text
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await update.message.chat.send_action(action="typing")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è YandexGPT
        prompt = f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {user_message}

–ü—Ä–∏–¥—É–º–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã. 
–†–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
2. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
3. –ü–æ—à–∞–≥–æ–≤—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
4. –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è

–†–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –ø—Ä–æ—Å—Ç—ã–º –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤ –¥–æ–º–∞—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö.
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ YandexGPT
        recipe = await get_recipe_from_yagpt(prompt)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(recipe)
        
    except Exception as e:
        error_message = str(e)
        logger.error(f"–û—à–∏–±–∫–∞: {error_message}")
        
        # –ü–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if "401" in error_message:
            user_friendly_error = "üîê –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ YandexGPT: –Ω–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á"
        elif "403" in error_message:
            user_friendly_error = "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ FOLDER_ID –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
        elif "404" in error_message:
            user_friendly_error = "üîç YandexGPT –Ω–µ –Ω–∞–π–¥–µ–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ FOLDER_ID"
        elif "429" in error_message:
            user_friendly_error = "‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ YandexGPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        elif "500" in error_message:
            user_friendly_error = "‚ö° –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ YandexGPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        elif "400" in error_message:
            user_friendly_error = "üìù –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
        elif "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" in error_message.lower() or "network" in error_message.lower():
            user_friendly_error = "üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YandexGPT. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç"
        else:
            user_friendly_error = f"‚ùå –û—à–∏–±–∫–∞: {error_message}"
        
        await update.message.reply_text(
            f"{user_friendly_error}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def get_recipe_from_yagpt(prompt: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å YandexGPT API"""
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "x-folder-id": FOLDER_ID
    }
    
    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 2000
        },
        "messages": [
            {
                "role": "user",
                "text": prompt
            }
        ]
    }
    
    response = requests.post(YANDEX_GPT_URL, headers=headers, json=data, timeout=30)
    
    if response.status_code != 200:
        # –ü–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏
        error_text = f"HTTP {response.status_code}: {response.text}"
        raise Exception(error_text)
    
    result = response.json()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    if ('result' not in result or 
        'alternatives' not in result['result'] or 
        not result['result']['alternatives']):
        raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç YandexGPT")
    
    return result['result']['alternatives'][0]['message']['text']

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        if not all([BOT_TOKEN, YANDEX_API_KEY, FOLDER_ID]):
            logger.error("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=["message"]
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
