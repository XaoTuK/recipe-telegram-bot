#!/usr/bin/env python3
import os
import logging
import re
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes, 
    ConversationHandler
)
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ Railway
BOT_TOKEN = os.environ.get('BOT_TOKEN')
YANDEX_API_KEY = os.environ.get('YANDEX_API_KEY')
FOLDER_ID = os.environ.get('FOLDER_ID')

# URL –¥–ª—è YandexGPT API
YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
(
    AWAITING_PRODUCTS,
    AWAITING_DISH_TYPE, 
    AWAITING_TIME,
    AWAITING_PREFERENCES,
    AWAITING_PORTIONS,
    AWAITING_CALORIES,
    AWAITING_VALIDATION_CONFIRMATION
) = range(7)  # 7 —Å–æ—Å—Ç–æ—è–Ω–∏–π

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
DISH_TYPE_KEYBOARD = [["üç≤ –°–∞–ª–∞—Ç", "üçú –°—É–ø"], ["üçõ –ì–æ—Ä—è—á–µ–µ", "üç∞ –î–µ—Å–µ—Ä—Ç"], ["üé≤ –ü—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç"]]
TIME_KEYBOARD = [["üî∏ 15 –º–∏–Ω", "üî∏ 30 –º–∏–Ω"], ["üî∏ 45 –º–∏–Ω", "üî∏ 60 –º–∏–Ω+"], ["‚è∞ –ù–µ –≤–∞–∂–Ω–æ"]]
PORTIONS_KEYBOARD = [["1-2", "3-4"], ["5-6", "7+"]]
CALORIES_KEYBOARD = [["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]]
VALIDATION_KEYBOARD = [["‚úÖ –î–∞, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", "‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫"]]

# –ë–ê–ó–ê –†–ï–ê–õ–¨–ù–´–• –ü–†–û–î–£–ö–¢–û–í (–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫)
REAL_PRODUCTS = {
    # –û–≤–æ—â–∏
    "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å", "–∫–∞—Ä—Ç–æ—à–∫–∞", "–º–æ—Ä–∫–æ–≤—å", "–ª—É–∫", "–ø–æ–º–∏–¥–æ—Ä", "–æ–≥—É—Ä—Ü—ã", "–∫–∞–ø—É—Å—Ç–∞", "–ø–µ—Ä–µ—Ü", "–±—Ä–æ–∫–∫–æ–ª–∏",
    "—Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞", "–∫–∞–±–∞—á–æ–∫", "–±–∞–∫–ª–∞–∂–∞–Ω", "—Ç—ã–∫–≤–∞", "—Ä–µ–¥—å–∫–∞", "—Ä–µ–ø–∞", "—Å–≤–µ–∫–ª–∞", "—Ä–µ–¥–∏—Å", "–∑–µ–ª–µ–Ω—å",
    "—É–∫—Ä–æ–ø", "–ø–µ—Ç—Ä—É—à–∫–∞", "–±–∞–∑–∏–ª–∏–∫", "–∫–∏–Ω–∑–∞", "—Å–∞–ª–∞—Ç", "—à–ø–∏–Ω–∞—Ç", "—â–∞–≤–µ–ª—å", "—á–µ—Å–Ω–æ–∫", "–∏–º–±–∏—Ä—å",
    
    # –§—Ä—É–∫—Ç—ã –∏ —è–≥–æ–¥—ã
    "—è–±–ª–æ–∫–æ", "–≥—Ä—É—à–∞", "–∞–ø–µ–ª—å—Å–∏–Ω", "–º–∞–Ω–¥–∞—Ä–∏–Ω", "–ª–∏–º–æ–Ω", "–ª–∞–π–º", "–≥—Ä–µ–π–ø—Ñ—Ä—É—Ç", "–±–∞–Ω–∞–Ω", "–≤–∏–Ω–æ–≥—Ä–∞–¥",
    "–ø–µ—Ä—Å–∏–∫", "–∞–±—Ä–∏–∫–æ—Å", "—Å–ª–∏–≤–∞", "–≤–∏—à–Ω—è", "—á–µ—Ä–µ—à–Ω—è", "–∫–ª—É–±–Ω–∏–∫–∞", "–º–∞–ª–∏–Ω–∞", "—á–µ—Ä–Ω–∏–∫–∞", "–≥–æ–ª—É–±–∏–∫–∞",
    "—Å–º–æ—Ä–æ–¥–∏–Ω–∞", "–∫—Ä—ã–∂–æ–≤–Ω–∏–∫", "–∞—Ä–±—É–∑", "–¥—ã–Ω—è", "–∞–Ω–∞–Ω–∞—Å", "–∫–∏–≤–∏", "–≥—Ä–∞–Ω–∞—Ç", "—Ö—É—Ä–º–∞", "–∏–Ω–∂–∏—Ä",
    
    # –ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞
    "–∫—É—Ä–∏—Ü–∞", "–∏–Ω–¥–µ–π–∫–∞", "—É—Ç–∫–∞", "–≥—É—Å—å", "–≥–æ–≤—è–¥–∏–Ω–∞", "—Å–≤–∏–Ω–∏–Ω–∞", "–±–∞—Ä–∞–Ω–∏–Ω–∞", "—Ç–µ–ª—è—Ç–∏–Ω–∞", "–∫—Ä–æ–ª–∏–∫",
    "—Ñ–∞—Ä—à", "–≥—Ä—É–¥–∫–∞", "–±–µ–¥—Ä–æ", "–æ–∫–æ—Ä–æ—á–∫–∞", "–∫—Ä—ã–ª—å—è", "–ø–µ—á–µ–Ω—å", "—Å–µ—Ä–¥—Ü–µ", "—è–∑—ã–∫",
    
    # –†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã
    "–ª–æ—Å–æ—Å—å", "—Å–µ–º–≥–∞", "—Ñ–æ—Ä–µ–ª—å", "–≥–æ—Ä–±—É—à–∞", "—Ç—Ä–µ—Å–∫–∞", "–º–∏–Ω—Ç–∞–π", "–æ–∫—É–Ω—å", "—Å—É–¥–∞–∫", "—â—É–∫–∞", "–∫–∞—Ä–ø",
    "—Å–µ–ª—å–¥—å", "—Å–∫—É–º–±—Ä–∏—è", "—Ç—É–Ω–µ—Ü", "–∫–∞–ª—å–º–∞—Ä", "–∫—Ä–µ–≤–µ—Ç–∫–∏", "–º–∏–¥–∏–∏", "–æ—Å—å–º–∏–Ω–æ–≥", "–∏–∫—Ä–∞",
    
    # –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    "–º–æ–ª–æ–∫–æ", "–∫–µ—Ñ–∏—Ä", "–π–æ–≥—É—Ä—Ç", "—Å–º–µ—Ç–∞–Ω–∞", "—Å–ª–∏–≤–∫–∏", "—Ç–≤–æ—Ä–æ–≥", "—Å—ã—Ä", "–±—Ä—ã–Ω–∑–∞", "–º–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ",
    "—Ä—è–∂–µ–Ω–∫–∞", "–ø—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∞", "–≤–∞—Ä–µ–Ω–µ—Ü",
    
    # –Ø–π—Ü–∞
    "—è–π—Ü–∞", "—è–π—Ü–æ",
    
    # –ö—Ä—É–ø—ã –∏ –∑–ª–∞–∫–∏
    "—Ä–∏—Å", "–≥—Ä–µ—á–∫–∞", "–æ–≤—Å—è–Ω–∫–∞", "–ø—à–µ–Ω–æ", "–ø–µ—Ä–ª–æ–≤–∫–∞", "–º–∞–Ω–∫–∞", "–∫—É–∫—É—Ä—É–∑–∞", "–±—É–ª–≥—É—Ä", "–∫–∏–Ω–æ–∞",
    "–Ω—É—Ç", "—Ñ–∞—Å–æ–ª—å", "–≥–æ—Ä–æ—Ö", "—á–µ—á–µ–≤–∏—Ü–∞", "—Å–æ—è", "–º–∞–∫–∞—Ä–æ–Ω—ã", "—Å–ø–∞–≥–µ—Ç—Ç–∏", "–ª–∞–ø—à–∞", "–≤–µ—Ä–º–∏—à–µ–ª—å",
    
    # –û—Ä–µ—Ö–∏ –∏ —Å–µ–º–µ–Ω–∞
    "–≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏", "–º–∏–Ω–¥–∞–ª—å", "—Ñ—É–Ω–¥—É–∫", "–∫–µ—à—å—é", "–∞—Ä–∞—Ö–∏—Å", "—Å–µ–º–µ—á–∫–∏", "–∫—É–Ω–∂—É—Ç", "–ª–µ–Ω",
    
    # –ú–∞—Å–ª–∞ –∏ —Å–æ—É—Å—ã
    "–º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ", "–º–∞—Å–ª–æ –æ–ª–∏–≤–∫–æ–≤–æ–µ", "–º–∞—Å–ª–æ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ", "—É–∫—Å—É—Å", "—Å–æ—É—Å —Å–æ–µ–≤—ã–π",
    "–∫–µ—Ç—á—É–ø", "–º–∞–π–æ–Ω–µ–∑", "–≥–æ—Ä—á–∏—Ü–∞", "—Ö—Ä–µ–Ω",
    
    # –°–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã
    "—Å–æ–ª—å", "–ø–µ—Ä–µ—Ü", "—Å–∞—Ö–∞—Ä", "–º–µ–¥", "–º—É–∫–∞", "–¥—Ä–æ–∂–∂–∏", "—Ä–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å", "–≤–∞–Ω–∏–ª–∏–Ω", "–∫–æ—Ä–∏—Ü–∞",
    "–≥–≤–æ–∑–¥–∏–∫–∞", "–ª–∞–≤—Ä–æ–≤—ã–π –ª–∏—Å—Ç", "–∫—É—Ä–∫—É–º–∞", "–ø–∞–ø—Ä–∏–∫–∞", "–∫–æ—Ä–∏–∞–Ω–¥—Ä", "–∫–∞—Ä—Ä–∏", "–∏–º–±–∏—Ä—å", "–º—É—Å–∫–∞—Ç–Ω—ã–π –æ—Ä–µ—Ö",
    
    # –ù–∞–ø–∏—Ç–∫–∏
    "–≤–æ–¥–∞", "—Å–æ–∫", "—á–∞–π", "–∫–æ—Ñ–µ", "–∫–∞–∫–∞–æ",
    
    # –ì—Ä–∏–±—ã
    "—à–∞–º–ø–∏–Ω—å–æ–Ω—ã", "–≤–µ—à–µ–Ω–∫–∏", "–ª–∏—Å–∏—á–∫–∏", "–æ–ø—è—Ç–∞", "–±–µ–ª—ã–µ –≥—Ä–∏–±—ã", "–ø–æ–¥–±–µ—Ä–µ–∑–æ–≤–∏–∫–∏",
    
    # –•–ª–µ–± –∏ –≤—ã–ø–µ—á–∫–∞
    "—Ö–ª–µ–±", "–±–∞—Ç–æ–Ω", "–±—É–ª–∫–∞", "–ª–∞–≤–∞—à", "—Å—É—Ö–∞—Ä–∏", "–≥—Ä–µ–Ω–∫–∏"
}

# –ù–ï–¶–ï–ù–ó–£–†–ù–´–ï –°–õ–û–í–ê (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä)
BLOCKED_WORDS = {
    "—Ö—É–π", "–ø–∏–∑–¥–∞", "–µ–±–∞–ª", "–±–ª—è–¥—å", "–±–ª—è", "–µ–±–∞—Ç—å", "–≥–æ–Ω–¥–æ–Ω", "–º—É–¥–∞–∫", "–∂–æ–ø–∞", "—Å—É—á–∫–∞",
    "–¥–æ–ª–±–∞–µ–±", "—Ö—É–µ—Å–æ—Å", "–ø–∏–∑–¥–µ—Ü", "–æ—Ö—É–µ–Ω–Ω–æ", "–æ—Ö—É–µ–Ω–Ω—ã–π", "–æ—Ö—É–µ—Ç—å", "–≤—ã–µ–±–æ–∫", "–µ–±–ª–∞–Ω"
}

# –°–õ–û–í–ê–†–¨ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –û–ü–ï–ß–ê–¢–û–ö
CORRECTIONS = {
    "–º–∞–Ω–¥–∞–≤–æ—à–∫–∏": "–º–∞–Ω–¥–∞—Ä–∏–Ω—ã",
    "–∫–∞—Ä—Ç–æ—Ñ–µ–ª–∏–Ω": "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å", 
    "–∫–∞—Ä—Ç–æ—à–∫–∞": "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å",
    "–ø–æ–º–∏–¥–æ—Ä": "–ø–æ–º–∏–¥–æ—Ä—ã",
    "–æ–≥—É—Ä—á–∏–∫": "–æ–≥—É—Ä—Ü—ã",
    "–ø–µ—Ä–µ—Ü": "–ø–µ—Ä–µ—Ü –±–æ–ª–≥–∞—Ä—Å–∫–∏–π",
    "–∫—É—Ä–∏–Ω": "–∫—É—Ä–∏—Ü–∞",
    "–≥–æ–≤—è–¥–∏–Ω": "–≥–æ–≤—è–¥–∏–Ω–∞",
    "—Å–≤–∏–Ω–∏–Ω": "—Å–≤–∏–Ω–∏–Ω–∞",
    "–º–∞–∫–∞—Ä–æ–Ω": "–º–∞–∫–∞—Ä–æ–Ω—ã",
    "–≤–µ—Ä–º–∏—à–µ–ª—å": "–º–∞–∫–∞—Ä–æ–Ω—ã",
    "—Å–ø–∞–≥–µ—Ç—Ç–∏": "–º–∞–∫–∞—Ä–æ–Ω—ã"
}

class ProductValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    
    @staticmethod
    def validate_products(user_input: str) -> dict:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        # –û—á–∏—â–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cleaned_input = ProductValidator.clean_input(user_input)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        products_list = ProductValidator.parse_products(cleaned_input)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç
        valid_products = []
        invalid_products = []
        corrected_products = []
        
        for product in products_list:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω—É
            if ProductValidator.contains_blocked_words(product):
                invalid_products.append(product)
                continue
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫
            corrected_product = ProductValidator.correct_spelling(product)
            if corrected_product != product:
                corrected_products.append(f"{product} ‚Üí {corrected_product}")
                product = corrected_product
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
            if ProductValidator.is_real_product(product):
                valid_products.append(product)
            else:
                invalid_products.append(product)
        
        return {
            "valid": valid_products,
            "invalid": invalid_products,
            "corrected": corrected_products,
            "original_input": user_input,
            "is_valid": len(valid_products) >= 1 and len(invalid_products) == 0
        }
    
    @staticmethod
    def clean_input(text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç"""
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        text = text.lower()
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = ' '.join(text.split())
        # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –∑–∞–ø—è—Ç—ã—Ö
        text = re.sub(r'[^\w\s,]', '', text)
        return text
    
    @staticmethod
    def parse_products(text: str) -> list:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"""
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
        products = [p.strip() for p in text.split(',')]
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        products = [p for p in products if p]
        return products
    
    @staticmethod
    def contains_blocked_words(product: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤"""
        product_lower = product.lower()
        return any(blocked_word in product_lower for blocked_word in BLOCKED_WORDS)
    
    @staticmethod
    def correct_spelling(product: str) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Å—Ç—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏"""
        product_lower = product.lower()
        for wrong, correct in CORRECTIONS.items():
            if wrong in product_lower:
                return correct
        return product
    
    @staticmethod
    def is_real_product(product: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ"""
        product_lower = product.lower()
        
        # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if product_lower in REAL_PRODUCTS:
            return True
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–ø—Ä–æ–¥—É–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ)
        for real_product in REAL_PRODUCTS:
            if real_product in product_lower or product_lower in real_product:
                return True
        
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üç≥ *–ü—Ä–∏–≤–µ—Ç! –Ø RecipeChefAI - —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≥–æ—Ç–æ–≤–∫–µ!*

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –µ—Å—Ç—å, –∏ —è:
‚Ä¢ –ü—Ä–∏–¥—É–º–∞—é –≤–∫—É—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç üéØ
‚Ä¢ –£—á—Ç—É —Ç–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è ‚≠ê  
‚Ä¢ –ü–æ–¥—Å–∫–∞–∂—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚è±Ô∏è
‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—é –ö–ë–ñ–£ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) üìä

*–ù–∞–ø—Ä–∏–º–µ—Ä:* `–∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –ª—É–∫, –º–æ—Ä–∫–æ–≤—å, –ø–æ–º–∏–¥–æ—Ä—ã`

*–ì–æ—Ç–æ–≤ –≥–æ—Ç–æ–≤–∏—Ç—å? –û—Ç–ø—Ä–∞–≤–ª—è–π –ø—Ä–æ–¥—É–∫—Ç—ã!* üöÄ
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    return AWAITING_PRODUCTS

async def handle_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    user_message = update.message.text
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    validation_result = ProductValidator.validate_products(user_message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    context.user_data['validation_result'] = validation_result
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π - –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if not validation_result["is_valid"]:
        return await ask_validation_confirmation(update, validation_result)
    
    # –ï—Å–ª–∏ –≤—Å–µ –æ–∫ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
    context.user_data['products'] = ', '.join(validation_result["valid"])
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –±–ª—é–¥–∞
    await update.message.reply_text(
        "üçΩÔ∏è *–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?*",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardMarkup(DISH_TYPE_KEYBOARD, one_time_keyboard=True, resize_keyboard=True)
    )
    
    return AWAITING_DISH_TYPE

async def ask_validation_confirmation(update: Update, validation_result: dict):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    
    message_lines = ["ü§î *–Ø –Ω–∞—à–µ–ª –ø—Ä–æ–±–ª–µ–º—ã –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ:*"]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    if validation_result["valid"]:
        message_lines.append("\n‚úÖ *–ü—Ä–∏–Ω—è–ª:*")
        for product in validation_result["valid"]:
            message_lines.append(f"‚Ä¢ {product}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏
    if validation_result["corrected"]:
        message_lines.append("\nüîÑ *–ò—Å–ø—Ä–∞–≤–∏–ª –æ–ø–µ—á–∞—Ç–∫–∏:*")
        for correction in validation_result["corrected"]:
            message_lines.append(f"‚Ä¢ {correction}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    if validation_result["invalid"]:
        message_lines.append("\n‚ùå *–ù–µ –ø–æ–Ω—è–ª:*")
        for product in validation_result["invalid"]:
            message_lines.append(f"‚Ä¢ {product}")
    
    message_lines.append("\n*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤?*")
    
    await update.message.reply_text(
        "\n".join(message_lines),
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardMarkup(VALIDATION_KEYBOARD, one_time_keyboard=True, resize_keyboard=True)
    )
    
    return AWAITING_VALIDATION_CONFIRMATION

async def handle_validation_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    user_choice = update.message.text
    validation_result = context.user_data.get('validation_result', {})
    
    if user_choice == "‚úÖ –î–∞, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å" and validation_result.get("valid"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        context.user_data['products'] = ', '.join(validation_result["valid"])
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –±–ª—é–¥–∞
        await update.message.reply_text(
            "üçΩÔ∏è *–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?*",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardMarkup(DISH_TYPE_KEYBOARD, one_time_keyboard=True, resize_keyboard=True)
        )
        
        return AWAITING_DISH_TYPE
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫
        await update.message.reply_text(
            "üîÑ *–•–æ—Ä–æ—à–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.*\n\n"
            "*–°–æ–≤–µ—Ç:* –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove()
        )
        
        return AWAITING_PRODUCTS

async def handle_dish_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–ª—é–¥–∞"""
    dish_type = update.message.text
    context.user_data['dish_type'] = dish_type
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
    await update.message.reply_text(
        "‚è±Ô∏è *–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —É –≤–∞—Å –µ—Å—Ç—å –Ω–∞ –≥–æ—Ç–æ–≤–∫—É?*",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardMarkup(TIME_KEYBOARD, one_time_keyboard=True, resize_keyboard=True)
    )
    
    return AWAITING_TIME

async def handle_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    cooking_time = update.message.text
    context.user_data['cooking_time'] = cooking_time
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    await update.message.reply_text(
        "üå± *–ï—Å—Ç—å –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è?*\n\n"
        "*–ù–∞–ø—Ä–∏–º–µ—Ä:* –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ, –æ—Å—Ç—Ä–æ–µ, –±–µ–∑ –º–æ–ª–æ—á–Ω–æ–≥–æ, –¥–∏–µ—Ç–∏—á–µ—Å–∫–æ–µ\n"
        "*–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:* –Ω–µ—Ç",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )
    
    return AWAITING_PREFERENCES

async def handle_preferences(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
    preferences = update.message.text
    context.user_data['preferences'] = preferences
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
    await update.message.reply_text(
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ *–ù–∞ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≥–æ—Ç–æ–≤–∏–º?*",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardMarkup(PORTIONS_KEYBOARD, one_time_keyboard=True, resize_keyboard=True)
    )
    
    return AWAITING_PORTIONS

async def handle_portions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ—Ä—Ü–∏–π"""
    portions = update.message.text
    context.user_data['portions'] = portions
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π
    await update.message.reply_text(
        "üìä *–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ (–∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã) –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞?*",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardMarkup(CALORIES_KEYBOARD, one_time_keyboard=True, resize_keyboard=True)
    )
    
    return AWAITING_CALORIES

async def handle_calories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
    calories_choice = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['need_calories'] = calories_choice == "‚úÖ –î–∞"
    
    await update.message.reply_text(
        "üéØ *–û—Ç–ª–∏—á–Ω–æ! –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç...*",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await update.message.chat.send_action(action="typing")
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è YandexGPT
        prompt = create_optimized_prompt(context.user_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ YandexGPT
        recipe_text = await get_recipe_from_yagpt(prompt)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç
        formatted_recipe = format_recipe_response(recipe_text, context.user_data.get('need_calories', False))
        await update.message.reply_text(formatted_recipe, parse_mode='HTML')
        
    except Exception as e:
        error_message = handle_error(e)
        await update.message.reply_text(error_message)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    context.user_data.clear()
    return ConversationHandler.END

def create_optimized_prompt(user_data: dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è YandexGPT"""
    
    products = user_data.get('products', '')
    dish_type = user_data.get('dish_type', '')
    cooking_time = user_data.get('cooking_time', '')
    preferences = user_data.get('preferences', '')
    portions = user_data.get('portions', '')
    need_calories = user_data.get('need_calories', False)
    
    calories_section = ""
    if need_calories:
        calories_section = "6. üìä –ö–ë–ñ–£ (–∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã –Ω–∞ –ø–æ—Ä—Ü–∏—é)"
    
    prompt = f"""
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä –∏ –¥–∏–µ—Ç–æ–ª–æ–≥. –°–æ–∑–¥–∞–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã: {products}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:
- –¢–∏–ø –±–ª—é–¥–∞: {dish_type}
- –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: {cooking_time}
- –ü–æ—Ä—Ü–∏–∏: {portions}
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {preferences}

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞:
1. üçΩÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (–µ–º–æ–¥–∑–∏)
2. üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Ç–æ—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ—Ä—Ü–∏–π)
3. üë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (—á–µ—Ç–∫–∏–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–≥–∏, –º–∞–∫—Å–∏–º—É–º 5 —à–∞–≥–æ–≤)
4. ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏
5. üí° –ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç —à–µ—Ñ–∞
{calories_section}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –†–µ—Ü–µ–ø—Ç –î–û–õ–ñ–ï–ù –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –∏ –≤—ã–ø–æ–ª–Ω–∏–º—ã–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
- –£—á–∏—Ç—ã–≤–∞–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
- –û–±—ä–µ–º: 250-400 —Å–ª–æ–≤
- –Ø–∑—ã–∫: —Ç–æ—Ç –∂–µ —á—Ç–æ –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –¢–æ–ª—å–∫–æ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
"""
    return prompt

def format_recipe_response(recipe_text: str, need_calories: bool) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –∫—Ä–∞—Å–∏–≤—ã–π HTML"""
    
    lines = recipe_text.split('\n')
    formatted_lines = []
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        if any(marker in line for marker in ['üçΩÔ∏è', '–ù–∞–∑–≤–∞–Ω–∏–µ', 'ü•ò']):
            formatted_lines.append(f"<b>{line}</b>\n")
        elif any(marker in line for marker in ['üìã', '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', 'ü•ï']):
            formatted_lines.append(f"<b>{line}</b>")
        elif any(marker in line for marker in ['üë®‚Äçüç≥', '–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ', 'üç≥']):
            formatted_lines.append(f"\n<b>{line}</b>")
        elif any(marker in line for marker in ['‚è±Ô∏è', '–í—Ä–µ–º—è', 'üïí']):
            formatted_lines.append(f"\n<b>{line}</b>")
        elif any(marker in line for marker in ['üí°', '–°–æ–≤–µ—Ç', 'üåü']):
            formatted_lines.append(f"\n<b>{line}</b>")
        elif any(marker in line for marker in ['üìä', '–ö–ë–ñ–£', '–ö–∞–ª–æ—Ä–∏–∏']):
            formatted_lines.append(f"\n<b>{line}</b>")
        elif line.startswith(('‚Ä¢', '-', '1.', '2.', '3.', '4.', '5.')):
            formatted_lines.append(f"‚Ä¢ {line.lstrip('‚Ä¢- 12345.')}")
        else:
            formatted_lines.append(line)
    
    formatted_text = '\n'.join(formatted_lines)
    
    if need_calories:
        formatted_text += "\n\nüìä <i>–ö–ë–ñ–£ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ</i>"
    
    formatted_text += "\n\n#—Ä–µ—Ü–µ–ø—Ç #–≤–∫—É—Å–Ω–æ #–≥–æ—Ç–æ–≤–∏–º–¥–æ–º–∞"
    
    return formatted_text

async def get_recipe_from_yagpt(prompt: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å YandexGPT API"""
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "x-folder-id": FOLDER_ID
    }
    
    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 2000
        },
        "messages": [
            {
                "role": "user",
                "text": prompt
            }
        ]
    }
    
    response = requests.post(YANDEX_GPT_URL, headers=headers, json=data, timeout=30)
    
    if response.status_code != 200:
        error_text = f"HTTP {response.status_code}: {response.text}"
        raise Exception(error_text)
    
    result = response.json()
    
    if ('result' not in result or 
        'alternatives' not in result['result'] or 
        not result['result']['alternatives']):
        raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç YandexGPT")
    
    return result['result']['alternatives'][0]['message']['text']

def handle_error(error: Exception) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    error_message = str(error)
    logger.error(f"–û—à–∏–±–∫–∞: {error_message}")
    
    if "401" in error_message:
        return "üîê –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ YandexGPT"
    elif "403" in error_message:
        return "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
    elif "429" in error_message:
        return "‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
    elif "500" in error_message:
        return "‚ö° –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ YandexGPT"
    else:
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

async def handle_direct_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å —Å /start"""
    await update.message.reply_text(
        "üç≥ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start\n\n"
        "–Ø –ø–æ–º–æ–≥—É –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –≤–∫—É—Å–Ω–æ–µ –±–ª—é–¥–æ –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤!",
        reply_markup=ReplyKeyboardRemove()
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    context.user_data.clear()
    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        if not all([BOT_TOKEN, YANDEX_API_KEY, FOLDER_ID]):
            logger.error("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            return
        
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                AWAITING_PRODUCTS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_products)
                ],
                AWAITING_VALIDATION_CONFIRMATION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_validation_confirmation)
                ],
                AWAITING_DISH_TYPE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_dish_type)
                ],
                AWAITING_TIME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_time)
                ],
                AWAITING_PREFERENCES: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_preferences)
                ],
                AWAITING_PORTIONS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_portions)
                ],
                AWAITING_CALORIES: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_calories)
                ],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
            allow_reentry=True
        )
        
        application.add_handler(conv_handler)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_direct_message))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
