#!/usr/bin/env python3
import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
import json

# –î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG  # –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ DEBUG –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ Railway
BOT_TOKEN = os.environ['BOT_TOKEN']
YANDEX_API_KEY = os.environ['YANDEX_API_KEY'] 
FOLDER_ID = os.environ['FOLDER_ID']

# URL –¥–ª—è YandexGPT API
YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üç≥ –ü—Ä–∏–≤–µ—Ç! –Ø RecipeChefAI - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≥–æ—Ç–æ–≤–∫–µ!

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:
"–∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –ª—É–∫, –º–æ—Ä–∫–æ–≤—å, –ø–æ–º–∏–¥–æ—Ä—ã"

–ò —è –ø—Ä–∏–¥—É–º–∞—é –¥–ª—è —Ç–µ–±—è –≤–∫—É—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç!
    """
    await update.message.reply_text(welcome_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"""
    user_message = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}")
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await update.message.chat.send_action(action="typing")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è YandexGPT
        prompt = f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {user_message}

–ü—Ä–∏–¥—É–º–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã. 
–†–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
2. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
3. –ü–æ—à–∞–≥–æ–≤—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
4. –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è

–†–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –ø—Ä–æ—Å—Ç—ã–º –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤ –¥–æ–º–∞—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö.
        """
        
        logger.debug(f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ–º—Ç: {prompt}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ YandexGPT
        recipe = await get_recipe_from_yagpt(prompt)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        logger.info("–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ä–µ—Ü–µ–ø—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        await update.message.reply_text(recipe)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await update.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def get_recipe_from_yagpt(prompt: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å YandexGPT API"""
    try:
        logger.info("=== –ù–ê–ß–ê–õ–û –ó–ê–ü–†–û–°–ê –ö YANDEXGPT ===")
        logger.info(f"FOLDER_ID: {FOLDER_ID}")
        logger.info(f"YANDEX_API_KEY: {YANDEX_API_KEY[:10]}...")  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –∫–ª—é—á–∞
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Api-Key {YANDEX_API_KEY}",
            "x-folder-id": FOLDER_ID
        }
        
        data = {
            "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite",
            "completionOptions": {
                "stream": False,
                "temperature": 0.7,
                "maxTokens": 2000
            },
            "messages": [
                {
                    "role": "user", 
                    "text": prompt
                }
            ]
        }
        
        logger.debug(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {headers}")
        logger.debug(f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {json.dumps(data, ensure_ascii=False, indent=2)}")
        
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT...")
        response = requests.post(YANDEX_GPT_URL, headers=headers, json=data, timeout=30)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
        logger.debug(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        logger.debug(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ API! –°—Ç–∞—Ç—É—Å: {response.status_code}")
            logger.error(f"–¢–µ–ª–æ –æ—à–∏–±–∫–∏: {response.text}")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
            if response.status_code == 400:
                logger.error("–û—à–∏–±–∫–∞ 400: –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ FOLDER_ID –∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞")
            elif response.status_code == 401:
                logger.error("–û—à–∏–±–∫–∞ 401: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ YANDEX_API_KEY")
            elif response.status_code == 403:
                logger.error("–û—à–∏–±–∫–∞ 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ FOLDER_ID")
            elif response.status_code == 404:
                logger.error("–û—à–∏–±–∫–∞ 404: –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ FOLDER_ID")
            elif response.status_code == 429:
                logger.error("–û—à–∏–±–∫–∞ 429: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω")
            elif response.status_code == 500:
                logger.error("–û—à–∏–±–∫–∞ 500: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Yandex")
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ HTTP: {response.status_code}")
            
            raise Exception(f"API error {response.status_code}: {response.text}")
        
        # –ü–∞—Ä—Å–∏–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        result = response.json()
        logger.debug(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç JSON: {json.dumps(result, ensure_ascii=False, indent=2)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if 'result' not in result:
            logger.error(f"–í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'result': {result}")
            raise Exception("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –Ω–µ—Ç 'result'")
            
        if 'alternatives' not in result['result']:
            logger.error(f"–í result –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç 'alternatives': {result['result']}")
            raise Exception("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –Ω–µ—Ç 'alternatives'")
            
        if not result['result']['alternatives']:
            logger.error("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ alternatives")
            raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
            
        recipe_text = result['result']['alternatives'][0]['message']['text']
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Ä–µ—Ü–µ–ø—Ç, –¥–ª–∏–Ω–∞: {len(recipe_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.debug(f"–¢–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞: {recipe_text}")
        
        return recipe_text
        
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ YandexGPT: {e}", exc_info=True)
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YandexGPT: {e}")
    except KeyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–ª—é—á–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
        logger.error(f"–ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {result if 'result' in locals() else 'N/A'}")
        raise Exception(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç YandexGPT: {e}")
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        logger.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text if 'response' in locals() else 'N/A'}")
        raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ get_recipe_from_yagpt: {e}", exc_info=True)
        raise

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("=== –ó–ê–ü–£–°–ö –ë–û–¢–ê ===")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        logger.info(f"BOT_TOKEN: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
        logger.info(f"YANDEX_API_KEY: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if YANDEX_API_KEY else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
        logger.info(f"FOLDER_ID: {'‚úÖ ' + FOLDER_ID if FOLDER_ID else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
        
        if not all([BOT_TOKEN, YANDEX_API_KEY, FOLDER_ID]):
            logger.error("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=["message"]
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)

if __name__ == "__main__":
    main()
