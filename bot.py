import os
import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
PRODUCTS, MEAL_TYPE = range(2)

class YandexGPT:
    def __init__(self):
        self.api_key = os.getenv('YANDEX_API_KEY')
        self.folder_id = os.getenv('YANDEX_FOLDER_ID')
        self.base_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        
    def make_request(self, products, meal_type):
        messages = [
            {
                "role": "system", 
                "text": f"""–¢—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä. –°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è {meal_type} –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã: {products}.
                
–§–æ—Ä–º–∞—Ç:
üçΩÔ∏è [–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞] - {meal_type}
üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Ç–æ—á–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏)
üë®‚Äçüç≥ –ü–æ—à–∞–≥–æ–≤–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
üí° –ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç

–ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –¥–∞–π —Ç–æ—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""
            },
            {
                "role": "user", 
                "text": f"–ü—Ä–æ–¥—É–∫—Ç—ã: {products}, –ü—Ä–∏–µ–º –ø–∏—â–∏: {meal_type}"
            }
        ]
        
        headers = {
            "Authorization": f"Api-Key {self.api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "modelUri": f"gpt://{self.folder_id}/yandexgpt-lite",
            "completionOptions": {
                "stream": False,
                "temperature": 0.7,
                "maxTokens": 1500
            },
            "messages": messages
        }
        
        try:
            response = requests.post(self.base_url, json=data, headers=headers, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                return result['result']['alternatives'][0]['message']['text']
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

yandex_gpt = YandexGPT()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üë®‚Äçüç≥ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—à–µ—Ñ!\n\n"
        "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –µ—Å—Ç—å, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ä–µ—Ü–µ–ø—Ç!"
    )
    return PRODUCTS

async def receive_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    products = update.message.text
    context.user_data['products'] = products
    
    await update.message.reply_text(
        "üçΩÔ∏è –û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–π —ç—Ç–æ –ø—Ä–∏–µ–º –ø–∏—â–∏?\n"
        "‚Ä¢ –∑–∞–≤—Ç—Ä–∞–∫\n‚Ä¢ –æ–±–µ–¥\n‚Ä¢ —É–∂–∏–Ω\n‚Ä¢ –ø–µ—Ä–µ–∫—É—Å"
    )
    return MEAL_TYPE

async def receive_meal_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    meal_type = update.message.text.lower()
    products = context.user_data['products']
    
    await update.message.reply_text("üë®‚Äçüç≥ –ü—Ä–∏–¥—É–º—ã–≤–∞—é —Ä–µ—Ü–µ–ø—Ç...")
    
    response_text = yandex_gpt.make_request(products, meal_type)
    await update.message.reply_text(response_text)
    
    return PRODUCTS

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    return ConversationHandler.END

def main():
    telegram_token = os.getenv('TELEGRAM_TOKEN')
    
    application = Application.builder().token(telegram_token).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            PRODUCTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_products)],
            MEAL_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_meal_type)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()
