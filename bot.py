import os
import logging
import requests
import json
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG  # –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ DEBUG –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
)
logger = logging.getLogger(__name__)

class YandexGPTDebug:
    def __init__(self):
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.api_key = "AQVN2ISkHPTzTQ7PRtnMP5pVWr17W-hEv0WNqn8c"
        self.folder_id = "b1g8k14p2bqfrf2djq0c"
        self.base_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        
        logger.info(f"API Key: {self.api_key[:10]}...")  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –∫–ª—é—á–∞
        logger.info(f"Folder ID: {self.folder_id}")
        logger.info(f"Base URL: {self.base_url}")
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ø–Ω–¥–µ–∫—Å API"""
        test_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/models"
        
        headers = {
            "Authorization": f"Api-Key {self.api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ø–Ω–¥–µ–∫—Å API...")
            response = requests.get(test_url, headers=headers, timeout=10)
            
            logger.info(f"üì° –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            logger.info(f"üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
            
            if response.status_code == 200:
                return "‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ø–Ω–¥–µ–∫—Å API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {response.status_code} - {response.text}"
                
        except Exception as e:
            return f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–µ: {str(e)}"
    
    def make_request(self, messages):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Yandex GPT API —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"""
        
        headers = {
            "Authorization": f"Api-Key {self.api_key}",
            "Content-Type": "application/json",
            "User-Agent": "TelegramChefBot/1.0"
        }
        
        data = {
            "modelUri": f"gpt://{self.folder_id}/yandexgpt-lite",
            "completionOptions": {
                "stream": False,
                "temperature": 0.7,
                "maxTokens": 2000
            },
            "messages": messages
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
        logger.info("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ø–Ω–¥–µ–∫—Å GPT...")
        logger.info(f"üìù URL: {self.base_url}")
        logger.info(f"üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
        logger.info(f"üìù –î–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False)}")
        
        try:
            response = requests.post(
                self.base_url,
                json=data,
                headers=headers,
                timeout=30
            )
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            logger.info(f"üì° HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            logger.info(f"üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
            logger.info(f"üì° –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
            
            if response.status_code == 200:
                result = response.json()
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –Ø–Ω–¥–µ–∫—Å GPT")
                return result['result']['alternatives'][0]['message']['text']
            
            elif response.status_code == 401:
                error_msg = "‚ùå –û—à–∏–±–∫–∞ 401: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ Folder ID"
                logger.error(error_msg)
                return error_msg
                
            elif response.status_code == 403:
                error_msg = "‚ùå –û—à–∏–±–∫–∞ 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
                logger.error(error_msg)
                return error_msg
                
            elif response.status_code == 404:
                error_msg = "‚ùå –û—à–∏–±–∫–∞ 404: –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –º–æ–¥–µ–ª—å"
                logger.error(error_msg)
                return error_msg
                
            elif response.status_code == 429:
                error_msg = "‚ùå –û—à–∏–±–∫–∞ 429: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω"
                logger.error(error_msg)
                return error_msg
                
            elif response.status_code == 500:
                error_msg = "‚ùå –û—à–∏–±–∫–∞ 500: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ø–Ω–¥–µ–∫—Å"
                logger.error(error_msg)
                return error_msg
                
            else:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
                logger.error(error_msg)
                return error_msg
                
        except requests.exceptions.Timeout:
            error_msg = "‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API (30 —Å–µ–∫)"
            logger.error(error_msg)
            return error_msg
            
        except requests.exceptions.ConnectionError:
            error_msg = "üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ø–Ω–¥–µ–∫—Å API"
            logger.error(error_msg)
            return error_msg
            
        except requests.exceptions.HTTPError as e:
            error_msg = f"üåê HTTP –æ—à–∏–±–∫–∞: {str(e)}"
            logger.error(error_msg)
            return error_msg
            
        except Exception as e:
            error_msg = f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            logger.error(error_msg)
            return error_msg

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å GPT
yandex_gpt = YandexGPTDebug()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üë®‚Äçüç≥ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—à–µ—Ñ —Å –æ—Ç–ª–∞–¥–∫–æ–π!

–ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/test - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ø–Ω–¥–µ–∫—Å API
/debug - –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å!
"""
    await update.message.reply_text(welcome_text)

async def test_connection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –Ø–Ω–¥–µ–∫—Å API"""
    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ø–Ω–¥–µ–∫—Å API...")
    
    test_result = yandex_gpt.test_connection()
    await update.message.reply_text(test_result)

async def debug_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"""
    debug_text = f"""
üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–û–¢–ê:

üì° API –∫–ª—é—á: {yandex_gpt.api_key[:10]}...
üìÅ Folder ID: {yandex_gpt.folder_id}
üåê Endpoint: {yandex_gpt.base_url}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
"""
    await update.message.reply_text(debug_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = update.message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, 
        action="typing"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT
    messages = [
        {
            "role": "system",
            "text": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä. –î–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã."
        },
        {
            "role": "user", 
            "text": user_message
        }
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ø–Ω–¥–µ–∫—Å GPT
    response_text = yandex_gpt.make_request(messages)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    debug_info = f"""
üí¨ –í–∞—à –∑–∞–ø—Ä–æ—Å: {user_message}
üì° –û—Ç–≤–µ—Ç API: {response_text[:100]}...
"""
    logger.info(debug_info)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(response_text)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")
    
    if update and update.message:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    telegram_token = "8462003240:AAEzP4drh3jb6FErp26qr_HaRMjQF9i1OII"
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(telegram_token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test", test_connection))
    application.add_handler(CommandHandler("debug", debug_info))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    application.run_polling()
    logger.info("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    main()
