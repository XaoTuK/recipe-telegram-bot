import os
import json
import requests
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ['BOT_TOKEN']
YANDEX_API_KEY = os.environ['YANDEX_API_KEY']
FOLDER_ID = os.environ['FOLDER_ID']

YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π
user_sessions = {}

def create_prompt(products):
    return f"""
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä. –°–æ–∑–¥–∞–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã: {products}

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞:
1. üçΩÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
2. üìã –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
3. üë®‚Äçüç≥ –ü–æ—à–∞–≥–æ–≤–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (5 —à–∞–≥–æ–≤)
4. ‚è±Ô∏è –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏
5. üí° –ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç

–†–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –∏ –ø—Ä–æ—Å—Ç—ã–º –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è. –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π.
"""

def get_recipe_from_yagpt(prompt):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "x-folder-id": FOLDER_ID
    }
    
    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 2000
        },
        "messages": [
            {
                "role": "user",
                "text": prompt
            }
        ]
    }
    
    response = requests.post(YANDEX_GPT_URL, headers=headers, json=data, timeout=30)
    
    if response.status_code != 200:
        raise Exception(f"–û—à–∏–±–∫–∞ YandexGPT: {response.status_code}")
    
    result = response.json()
    return result['result']['alternatives'][0]['message']['text']

def send_telegram_message(chat_id, text, parse_mode=None):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text
    }
    if parse_mode:
        data["parse_mode"] = parse_mode
    
    requests.post(url, json=data)

def handler(event, context):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Yandex Cloud Functions"""
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
        update = json.loads(event['body'])
        message = update.get('message', {})
        chat_id = str(message['chat']['id'])
        text = message.get('text', '').strip()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text} –æ—Ç {chat_id}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if text == '/start':
            welcome_text = """
üç≥ *–ü—Ä–∏–≤–µ—Ç! –Ø RecipeChefAI - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≥–æ—Ç–æ–≤–∫–µ!*

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∏ —è –ø—Ä–∏–¥—É–º–∞—é –≤–∫—É—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç!

*–ù–∞–ø—Ä–∏–º–µ—Ä:* –∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –ª—É–∫, –º–æ—Ä–∫–æ–≤—å, –ø–æ–º–∏–¥–æ—Ä—ã

*–ì–æ—Ç–æ–≤ –≥–æ—Ç–æ–≤–∏—Ç—å? –û—Ç–ø—Ä–∞–≤–ª—è–π –ø—Ä–æ–¥—É–∫—Ç—ã!* üöÄ
            """
            send_telegram_message(chat_id, welcome_text, "Markdown")
            user_sessions[chat_id] = {"step": "awaiting_products"}
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        elif user_sessions.get(chat_id, {}).get('step') == 'awaiting_products' and text:
            send_telegram_message(chat_id, "üéØ *–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç...*", "Markdown")
            
            try:
                prompt = create_prompt(text)
                recipe_text = get_recipe_from_yagpt(prompt)
                send_telegram_message(chat_id, recipe_text)
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
                del user_sessions[chat_id]
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
                send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                del user_sessions[chat_id]
                
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        else:
            send_telegram_message(chat_id, "–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        
        return {
            'statusCode': 200,
            'body': 'OK'
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handler: {str(e)}")
        return {
            'statusCode': 500,
            'body': 'Internal Server Error'
        }
