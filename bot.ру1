import os
import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class YandexGPT:
    def __init__(self):
        # –í–ê–ñ–ù–û: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!
        self.api_key = "AQVN2ISkHPTzTQ7PRtnMP5pVWr17W-hEv0WNqn8c"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ env variable!
        self.folder_id = "b1g8k14p2bqfrf2djq0c"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ env variable!
        self.base_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        
    def make_request(self, messages):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Yandex GPT API"""
        
        headers = {
            "Authorization": f"Api-Key {self.api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "modelUri": f"gpt://{self.folder_id}/yandexgpt-lite",
            "completionOptions": {
                "stream": False,
                "temperature": 0.7,
                "maxTokens": 2000
            },
            "messages": messages
        }
        
        try:
            logger.info("Sending request to Yandex GPT API...")
            response = requests.post(
                self.base_url,
                json=data,
                headers=headers,
                timeout=30
            )
            
            logger.info(f"Response status: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                return result['result']['alternatives'][0]['message']['text']
            else:
                logger.error(f"Yandex API error {response.status_code}: {response.text}")
                return f"–û—à–∏–±–∫–∞ API: {response.status_code}"
                
        except requests.exceptions.Timeout:
            logger.error("Request timeout")
            return "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API"
        except requests.exceptions.ConnectionError:
            logger.error("Connection error")
            return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            return f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å GPT
yandex_gpt = YandexGPT()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üë®‚Äçüç≥ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—à–µ—Ñ!

–Ø –º–æ–≥—É:
‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ç–µ—Ö–Ω–∏–∫–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è  
‚Ä¢ –ü–æ–º–æ—á—å —Å –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å
‚Ä¢ –î–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –∫—É–ª–∏–Ω–∞—Ä–∏–∏

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å!
"""
    await update.message.reply_text(welcome_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = update.message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, 
        action="typing"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT
    messages = [
        {
            "role": "system",
            "text": """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. 
–î–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å —Ç–æ—á–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. 
–ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º. 
–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Å —ç–º–æ–¥–∑–∏ –∏ —á–µ—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π."""
        },
        {
            "role": "user", 
            "text": user_message
        }
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ø–Ω–¥–µ–∫—Å GPT
    response_text = yandex_gpt.make_request(messages)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if response_text:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(response_text) > 4096:
            for i in range(0, len(response_text), 4096):
                await update.message.reply_text(response_text[i:i+4096])
        else:
            await update.message.reply_text(response_text)
    else:
        await update.message.reply_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–∏—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –í–ê–ñ–ù–û: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!
    telegram_token = "8462003240:AAEzP4drh3jb6FErp26qr_HaRMjQF9i1OII"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ env variable!
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(telegram_token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Bot is starting...")
    application.run_polling()
    logger.info("Bot has stopped")

if __name__ == '__main__':
    main()
